#!/usr/bin/env python3
# -*- coding: utf-8 -*-

###
# Name: Seong Heon Lee and Kynan Barton
# Course: CS510 Fall 2017
###

"""Testing the ListComplexPlane Class
This module contains five test functions to keep the class safe from errors.
"""

from cplane import ListComplexPlane

def test_cplane():
    """test class instantiation with the default attributes (xmin=-4,
    xmax=4, ymin=-4, ymax=4)
    
    """
    LCP = ListComplexPlane()
    assert LCP.plane == [[-4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -3.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0], [-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0]] 

def f2(c): return 2*c
def f3(c): return c*c

def test_cplane2():
    """test the transformation function f2"""
    LCP = ListComplexPlane()
    LCP.apply(f2)
    assert LCP.plane == [[-8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -6.0, -6.0, -6.0, -6.0, -6.0, -6.0, -6.0, -6.0, -6.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -4.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0], [-8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0, -8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0, -8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0, -8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0, -8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0, -8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0, -8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0, -8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0, -8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0]]


def test_cplane3():
    """test if a new function added to self.fs when self.apply is called"""
    LCP = ListComplexPlane()
    LCP.apply(f2)
    LCP.apply(f3)
    assert LCP.fs == [f2, f3]


def test_cplane4():
    """ test the self.zoom function
    The function will take new values of attributes and generate a new plane """
    LCP = ListComplexPlane()
    LCP.apply(f2)
    LCP.apply(f3)
    LCP.zoom(-2, 2, 4, -2, 2, 4)
    assert LCP.plane == [[0.0, 12.0, 16.0, 12.0, 0.0, -12.0, 0.0, 4.0, 0.0, -12.0, -16.0, -4.0, 0.0, -4.0, -16.0, -12.0, 0.0, 4.0, 0.0, -12.0, 0.0, 12.0, 16.0, 12.0, 0.0], [32.0, 16.0, -0.0, -16.0, -32.0, 16.0, 8.0, -0.0, -8.0, -16.0, -0.0, -0.0, 0.0, 0.0, 0.0, -16.0, -8.0, 0.0, 8.0, 16.0, -32.0, -16.0, 0.0, 16.0, 32.0]]


def test_cplane5():
    """ test the self.refresh function
    The function should reset self.fs to an empty list"""
    LCP = ListComplexPlane()
    LCP.apply(f2)
    LCP.apply(f3)
    LCP.refresh()
    assert LCP.fs == []


